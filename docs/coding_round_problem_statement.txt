Coding Round Problem Statement

Task Title:
Agentic RAG Chatbot for Multi-Format Document QA using Model Context Protocol (MCP)

Problem Statement:
You are required to build an agent-based Retrieval-Augmented Generation (RAG) chatbot that can answer user questions using uploaded documents of various formats. Your architecture must follow an agentic structure and should incorporate Model Context Protocol (MCP) as the mechanism for communication between agents and/or agents â†” LLMs.

Core Functional Requirements
Your solution must:
1. Support Uploading & Parsing of Diverse Document Formats:
   - PDF
   - PPTX
   - CSV
   - DOCX
   - TXT / Markdown
2. Agentic Architecture (minimum 3 agents):
   - IngestionAgent: Parses & preprocesses documents.
   - RetrievalAgent: Handles embedding + semantic retrieval.
   - LLMResponseAgent: Forms final LLM query using retrieved context and generates answer.
3. Use Model Context Protocol (MCP):
   - Each agent must send/receive messages using structured MCP-like context objects, such as:
     {
       "sender": "RetrievalAgent",
       "receiver": "LLMResponseAgent",
       "type": "CONTEXT_RESPONSE",
       "trace_id": "abc-123",
       "payload": {
         "top_chunks": ["...", "..."],
         "query": "What are the KPIs?"
       }
     }
   - You can implement MCP using in-memory messaging, REST, or pub/sub.
4. Vector Store + Embeddings
   - Use any embeddings (OpenAI, HuggingFace, etc.)
   - Use a vector DB (FAISS, Chroma, etc.)
5. Chatbot Interface (UI)
   - Allow users to:
     - Upload documents
     - Ask multi-turn questions
     - View responses with source context
   - Use any UI framework: Streamlit, React, Angular, Flask, etc.

Deliverables
1. GitHub Repository
   - Include:
     - Well-organized code
     - Clear README.md with setup instructions
2. PPT Presentation
   - Slide deck (3â€“6 slides) must include:
     - Agent-based architecture with MCP integration
     - System flow diagram (with message passing)
     - Tech stack used
     - UI screenshots of working app
     - Challenges Faced while doing the project
     - (Optional) future scope / improvements
3. Submission
   - Share:
     - Public GitHub repository link
     - Architecture PPT (PDF or PPTX) [ To be included in the GitRepo Itself]
     - Include a Video for 5 mins where 1 min give the application demo, 2 min architecture and flow explanation, 2 min code explanation. (Its optional to show face)

Sample Workflow (Message Passing with MCP)
User uploads: sales_review.pdf, metrics.csv
User: "What KPIs were tracked in Q1?"
-> UI forwards to CoordinatorAgent
-> Coordinator triggers: ðŸ”¸ IngestionAgent -> parses documents
ðŸ”¸ RetrievalAgent -> finds relevant chunks
ðŸ”¸ LLMResponseAgent -> formats prompt & calls LLM
-> Chatbot shows answer + source chunks

MCP message example:
{
  "type": "RETRIEVAL_RESULT",
  "sender": "RetrievalAgent",
  "receiver": "LLMResponseAgent",
  "trace_id": "rag-457",
  "payload": {
    "retrieved_context": ["slide 3: revenue up", "doc: Q1 summary..."],
    "query": "What KPIs were tracked in Q1?"
  }
}

Hi there!

Thanks for sharing your details through the Google Form. After reviewing your background, tech stack, and GitHub projects, weâ€™re excited to let you know that youâ€™ve been shortlisted for the next round of our hiring process!

Coding Test:
https://drive.google.com/file/d/1dLGeruLl6NaS2BrT_wqaHV4nlj4tEGtp/view

Go through the project requirements carefully. Once done, upload your solution to a public GitHub repo and submit the details using the form below within 72 hours of receiving this email.

Submit Your Project:
https://forms.gle/Etga1U1xozRbw9qW9

Your Submission Should Include:
â€¢ A GitHub repo with clean, well-commented code and a helpful README.md
â€¢ An Architecture presentation (PDF or PPTX) â€“ upload this to the repo and the form
â€¢ A short 5-minute video:
o 1 min: App demo
o 2 min: System architecture & flow
o 2 min: Code walkthrough
â€¢ A few lines on any challenges you faced or improvements youâ€™d suggest (can go in the README or the form)

Deadline: 31st july 2025

Weâ€™re looking forward to seeing your creativity and problem-solving in action. Good luck and happy coding!

--
Best Regards